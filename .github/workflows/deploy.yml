name: Deploy To EC2

# 해당 레포지토리의 main 브렌치에 push가 반응했을경우 이벤트 시작
on:
  push:
    branches:
      - main

jobs:
  # 이벤트의 이름은 deploy이다
  deploy:
    # 서버환경 ubuntu 최신버전
    runs-on: ubuntu-latest
    steps:
        # Github ACtions 버내에 해당 Repository에서 해당 폴더를 다운로드함
        # GithubActions 라이브러리임
      - name: Github Repository에 올린 파일들을 불러오기
        uses: actions/checkout@v4

        # Github Actions 서버내에 JDK 17버전 설치함(라이브러리)
      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin #JDK의 회사
          java-version: 17      #JDK의 버전

        # Github Actions 서버내에 application.yml 파일 생성
        # 1. application.yml 파일생성
        # 2. 파일 내에 secrets에 저장해둔값 불러와서 값 입력
      - name: application.yml 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml

        # Github Actions 서버내에서 프로젝트 빌드하기
      - name: 테스트 및 빌드하기
        run: ./gradlew clean build

        # Github Actions 서버내에 빌드된 jar 파일을 project.jar로 이름 변경
      - name: 빌드된 파일 이름 변경하기
        run: mv ./build/libs/*SNAPSHOT.jar ./project.jar


      - name: 압축하기
        run: tar -czvf $GITHUB_SHA.tar.gz project.jar appspec.yml scripts

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: S3에 프로젝트 폴더 업로드하기
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.tar.gz s3://cicdMemoryServer/$GITHUB_SHA.tar.gz

      - name: CodeDeploy를 활용해 EC2에 프로젝트 코드를 배포하라고 명령
        run: aws deploy create-deployment
            --application-name memory-server
            --deployment-config-name CodeDeployDefault.AllAtOnce
            --deployment-group-name Production
            --s3-location bucket=memory-server,bundleType=tgz,key=$GITHUB_SHA.tar.gz