name: Deploy To EC2

# 해당 레포지토리의 main 브렌치에 push가 반응했을경우 이벤트 시작
on:
  push:
    branches:
      - main

jobs:
  # 이벤트의 이름은 deploy이다
  deploy:
    # 서버환경 ubuntu 최신버전
    runs-on: ubuntu-latest
    steps:
        # Github ACtions 버내에 해당 Repository에서 해당 폴더를 다운로드함
        # GithubActions 라이브러리임
      - name: Github Repository에 올린 파일들을 불러오기
        uses: actions/checkout@v4

        # Github Actions 서버내에 JDK 17버전 설치함(라이브러리)
      - name: JDK 17버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin #JDK의 회사
          java-version: 17      #JDK의 버전

        # Github Actions 서버내에 application.yml 파일 생성
        # 1. application.yml 파일생성
        # 2. 파일 내에 secrets에 저장해둔값 불러와서 값 입력
      - name: application.yml 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml

        # Github Actions 서버내에서 프로젝트 빌드하기
      - name: 테스트 및 빌드하기
        run: ./gradlew clean build

        # Github Actions 서버내에 빌드된 jar 파일을 project.jar로 이름 변경
      - name: 빌드된 파일 이름 변경하기
        run: mv ./build/libs/*SNAPSHOT.jar ./project.jar

        # Github Actions 서버내에 있는 jar파일 EC2 서버로 파일 전송하기(라이브러리)
      - name: SCP로 EC2에 빌드된 파일 전송하기
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: project.jar # 파일전송할 파일 이름
          target: /home/ubuntu/cicdMemoryServer/tobe # EC2로 전송하는데 어디에 파일을 보낼지 지정

        # SSH이용하여 EC2서버로 접속하기(라이브러리)
      - name: SSH(원격접속)로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          # 1. 기존에 사용하던 프로젝트 폴더 제거
          # 2. 프로젝트 배포할 폴더 생성
          # 3. Github Actions로 부터 받은 jar파일 프로젝트 배포 폴더로 이동
          # 4. 프로젝트 배포 폴더로 이동
          # 5. 현재 실행중이 8080포트 종료하기(만약 실행중인 8080 없더라도 오류로 처리하지 않고 성공처리함)
          # 6. 프로젝트 jar 실행
          # 7. SCP에서 전달받을때 사용하던 폴더 삭제
          script: |
            rm -rf /home/ubuntu/cicdMemoryServer/current 
            mkdir /home/ubuntu/cicdMemoryServer/current
            mv /home/ubuntu/cicdMemoryServer/tobe/project.jar /home/ubuntu/cicdMemoryServer/current/project.jar
            cd /home/ubuntu/cicdMemoryServer/current
            sudo fuser -k -n tcp 8080 || true
            nohup java -jar project.jar > ./output.log 2>&1 &
            rm -rf /home/ubuntu/cicdMemoryServer/tobe
